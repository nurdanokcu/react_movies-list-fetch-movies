{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","addMovie","useState","setQuery","setMovie","isLoading","setLoading","hasError","setError","doesMovieExist","setMovieExists","handleSubmit","event","a","preventDefault","result","movieData","imdbID","Title","Plot","Poster","finally","onSubmit","htmlFor","type","id","placeholder","cn","value","onChange","target","disabled","onClick","movieToAdd","current","some","movieToCheck","App","setMovies","ReactDOM","render","document","getElementById"],"mappings":"uTAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,YAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACE,UAAQ,cACRC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAa,UAAQ,aAAlC,SAAgDD,EAAMK,aAI1D,sBAAKJ,UAAU,UAAU,UAAQ,mBAAjC,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAS,UAAQ,WAAhC,4BC3BKC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,c,+CCRZ,SAASC,EAASC,GACvB,OAAOC,MAAM,GAAD,OAHE,2CAGF,cAAiBD,IAC1BE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,iBAAO,CACZC,SAAU,QACVC,MAAO,uB,MAIN,ICHMC,EAA6B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3C,EAA0BC,mBAAS,IAAnC,mBAAOV,EAAP,KAAcW,EAAd,KACA,EAA0BD,mBAAuB,MAAjD,mBAAOxB,EAAP,KAAc0B,EAAd,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA6BJ,oBAAS,GAAtC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAyCN,oBAAS,GAAlD,mBAAOO,EAAP,KAAuBC,EAAvB,KASMC,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACnBD,EAAME,iBACNR,GAAW,GAEXf,EAASC,GACNE,MAAK,SAAAqB,GDhBsB,IAACC,ECiBtBD,EAAqBE,OACxBb,EDjBD,CACLrB,OAF+BiC,ECkBGD,GDhBjBG,MACjBlC,YAAagC,EAAUG,KACvBtC,OAA6B,QAArBmC,EAAUI,OACd,4DACAJ,EAAUI,OACdlC,QAAQ,8BAAD,OAAgC8B,EAAUC,QACjD3B,OAAQ0B,EAAUC,SCedT,GAAS,MACRa,SAAQ,kBAAMf,GAAW,MAbX,2CAAH,sDAgClB,OACE,qCACE,uBACE3B,UAAU,aACV2C,SAAUX,EAFZ,UAIE,sBAAKhC,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ4C,QAAQ,cAAjC,yBAIA,qBAAK5C,UAAU,UAAf,SACE,uBACE,UAAQ,aACR6C,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZ/C,UAAWgD,IAAG,QAAS,CACrB,YAAapB,IAEfqB,MAAOpC,EACPqC,SA5Dc,SAACjB,GACzBT,EAASS,EAAMkB,OAAOF,OACtBpB,GAAS,GACTJ,EAAS,MACTM,GAAe,QA2DRH,GACC,mBAAG5B,UAAU,iBAAiB,UAAQ,eAAtC,qDAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACE,UAAQ,eACR6C,KAAK,SACL7C,UAAWgD,IAAG,kBAAmB,CAC/B,aAActB,IAEhB0B,UAAWvC,EANb,4BAYDiB,GACC,mBAAG9B,UAAU,iBAAb,gDAKDD,GACC,qBAAKC,UAAU,UAAf,SACE,wBACE,UAAQ,YACR6C,KAAK,SACL7C,UAAU,oBACVqD,QAAS,kBAzECC,EAyEoBvD,EAxE1CuB,GAAS,SAAAiC,GACP,OAAIA,EAAQC,MACV,SAAAC,GAAY,OAAIA,EAAa9C,SAAW2C,EAAW3C,WAEnDoB,GAAe,GAERwB,GAGH,GAAN,mBAAWA,GAAX,CAAoBD,OAEtB7B,EAAS,WACTD,EAAS,IAbY,IAAC8B,GAqEZ,qCAYPvD,GACC,sBAAKC,UAAU,YAAY,UAAQ,mBAAnC,UACE,oBAAIA,UAAU,QAAd,qBACA,cAAC,EAAD,CAAWD,MAAOA,WCxHf2D,EAAM,WACjB,MAA4BnC,mBAAkB,IAA9C,mBAAOd,EAAP,KAAekD,EAAf,KAEA,OACE,sBAAK3D,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQA,MAGtB,qBAAKT,UAAU,UAAf,SACE,cAAC,EAAD,CACEsB,SAAUqC,UCbpBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.e012090a.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { Movie } from './types/Movie';\nimport { ResponseError } from './types/ResponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=8e877a26';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n\nexport const normalizeMovieData = (movieData: MovieData): Movie => {\n  return {\n    title: movieData.Title,\n    description: movieData.Plot,\n    imgUrl: movieData.Poster === 'N/A'\n      ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n      : movieData.Poster,\n    imdbUrl: `https://www.imdb.com/title/${movieData.imdbID}`,\n    imdbId: movieData.imdbID,\n  };\n};\n","import cn from 'classnames';\nimport React, { Dispatch, SetStateAction, useState } from 'react';\nimport { getMovie, normalizeMovieData } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieData } from '../../types/MovieData';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\n\ntype Props = {\n  addMovie: Dispatch<SetStateAction<Movie[]>>\n};\n\nexport const FindMovie: React.FC<Props> = ({ addMovie }) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isLoading, setLoading] = useState(false);\n  const [hasError, setError] = useState(false);\n  const [doesMovieExist, setMovieExists] = useState(false);\n\n  const handleQueryChange = (event:React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setError(false);\n    setMovie(null);\n    setMovieExists(false);\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    setLoading(true);\n\n    getMovie(query)\n      .then(result => {\n        if ((result as MovieData).imdbID) {\n          setMovie(normalizeMovieData(result as MovieData));\n\n          return;\n        }\n\n        setError(true);\n      }).finally(() => setLoading(false));\n  };\n\n  const handleAddMovie = (movieToAdd: Movie) => {\n    addMovie(current => {\n      if (current.some(\n        movieToCheck => movieToCheck.imdbId === movieToAdd.imdbId,\n      )) {\n        setMovieExists(true);\n\n        return current;\n      }\n\n      return [...current, movieToAdd];\n    });\n    setMovie(null);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={cn('input', {\n                'is-danger': hasError,\n              })}\n              value={query}\n              onChange={handleQueryChange}\n            />\n          </div>\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn('button is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {doesMovieExist && (\n            <p className=\"help is-danger\">\n              This movie is already in the list!\n            </p>\n          )}\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => handleAddMovie(movie)}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={setMovies}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}